#+TITLE: Dotfile Configs

* Dotfiles

** Zsh
  #+BEGIN_SRC sh :tangle ~/.zshrc :replace yes
      # If you come from bash you might have to change your $PATH.
      # export PATH=$HOME/bin:/usr/local/bin:$PATH

      # Path to your oh-my-zsh installation.
      export ZSH=/Users/jrothberg/.oh-my-zsh

      # Set name of the theme to load. Optionally, if you set this to "random"
      # it'll load a random theme each time that oh-my-zsh is loaded.
      # See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
      ZSH_THEME="spaceship"

      # Uncomment the following line to use case-sensitive completion.
      # CASE_SENSITIVE="true"

      # Uncomment the following line to use hyphen-insensitive completion. Case
      # sensitive completion must be off. _ and - will be interchangeable.
      # HYPHEN_INSENSITIVE="true"

      # Uncomment the following line to disable bi-weekly auto-update checks.
      # DISABLE_AUTO_UPDATE="true"

      # Uncomment the following line to change how often to auto-update (in days).
      # export UPDATE_ZSH_DAYS=13

      # Uncomment the following line to disable colors in ls.
      # DISABLE_LS_COLORS="true"

      # Uncomment the following line to disable auto-setting terminal title.
      # DISABLE_AUTO_TITLE="true"

      # Uncomment the following line to enable command auto-correction.
      # ENABLE_CORRECTION="true"

      # Uncomment the following line to display red dots whilst waiting for completion.
      # COMPLETION_WAITING_DOTS="true"

      # Uncomment the following line if you want to disable marking untracked files
      # under VCS as dirty. This makes repository status check for large repositories
      # much, much faster.
      # DISABLE_UNTRACKED_FILES_DIRTY="true"

      # Uncomment the following line if you want to change the command execution time
      # stamp shown in the history command output.
      # The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
      # HIST_STAMPS="mm/dd/yyyy"

      # Would you like to use another custom folder than $ZSH/custom?
      # ZSH_CUSTOM=/path/to/new-custom-folder

      # Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
      # Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
      # Example format: plugins=(rails git textmate ruby lighthouse)
      # Add wisely, as too many plugins slow down shell startup.
      plugins=(git)

      source $ZSH/oh-my-zsh.sh

      # User configuration

      # export MANPATH="/usr/local/man:$MANPATH"

      # You may need to manually set your language environment
      # export LANG=en_US.UTF-8

      # Preferred editor for local and remote sessions
      # if [[ -n $SSH_CONNECTION ]]; then
      #   export EDITOR='vim'
      # else
      #   export EDITOR='mvim'
      # fi

      # Compilation flags
      # export ARCHFLAGS="-arch x86_64"

      # ssh
      # export SSH_KEY_PATH="~/.ssh/rsa_id"

      # Set personal aliases, overriding those provided by oh-my-zsh libs,
      # plugins, and themes. Aliases can be placed here, though oh-my-zsh
      # users are encouraged to define aliases within the ZSH_CUSTOM folder.
      # For a full list of active aliases, run `alias`.
      #
      # Example aliases
      # alias zshconfig="mate ~/.zshrc"
      # alias ohmyzsh="mate ~/.oh-my-zsh"

    # PROMPT
    SPACESHIP_PROMPT_SYMBOL='‚ûî'
    SPACESHIP_PROMPT_ADD_NEWLINE=true
    SPACESHIP_PROMPT_SEPARATE_LINE=true
    SPACESHIP_PROMPT_TRUNC=3

    # PREFIXES
    SPACESHIP_PREFIX_SHOW=true
    SPACESHIP_PREFIX_HOST=' at '
    SPACESHIP_PREFIX_DIR=' in '
    SPACESHIP_PREFIX_GIT=' on '
    SPACESHIP_PREFIX_ENV_DEFAULT=' via '
    SPACESHIP_PREFIX_NVM=$SPACESHIP_PREFIX_ENV_DEFAULT
    SPACESHIP_PREFIX_RUBY=$SPACESHIP_PREFIX_ENV_DEFAULT
    SPACESHIP_PREFIX_XCODE=$SPACESHIP_PREFIX_ENV_DEFAULT
    SPACESHIP_PREFIX_SWIFT=$SPACESHIP_PREFIX_ENV_DEFAULT
    SPACESHIP_PREFIX_VENV=$SPACESHIP_PREFIX_ENV_DEFAULT
    SPACESHIP_PREFIX_PYENV=$SPACESHIP_PREFIX_ENV_DEFAULT

    # GIT
    SPACESHIP_GIT_SHOW=true
    SPACESHIP_GIT_UNCOMMITTED='+'
    SPACESHIP_GIT_UNSTAGED='!'
    SPACESHIP_GIT_UNTRACKED='?'
    SPACESHIP_GIT_STASHED='$'
    SPACESHIP_GIT_UNPULLED='‚á£'
    SPACESHIP_GIT_UNPUSHED='‚á°'

    # NVM
    SPACESHIP_NVM_SHOW=true
    SPACESHIP_NVM_SYMBOL='‚¨¢'

    # RUBY
    # SPACESHIP_RUBY_SHOW=true
    # SPACESHIP_RUBY_SYMBOL='üíé'

    # SWIFT
    SPACESHIP_SWIFT_SHOW_LOCAL=true
    SPACESHIP_SWIFT_SHOW_GLOBAL=false
    SPACESHIP_SWIFT_SYMBOL='üê¶'

    # XCODE
    SPACESHIP_XCODE_SHOW_LOCAL=true
    SPACESHIP_XCODE_SHOW_GLOBAL=false
    SPACESHIP_XCODE_SYMBOL='üõ†'

    # VENV
    SPACESHIP_VENV_SHOW=true

    # PYENV
    SPACESHIP_PYENV_SHOW=true
    SPACESHIP_PYENV_SYMBOL='üêç'

    # VI_MODE
    SPACESHIP_VI_MODE_SHOW=true
    SPACESHIP_VI_MODE_INSERT="[I]"
    SPACESHIP_VI_MODE_NORMAL="[N]"

    alias emacs="/usr/local/Cellar/emacs/HEAD-5af51bd/Emacs.app/Contents/MacOS/Emacs -nw"

    export PATH="/usr/local/opt/curl/bin:$PATH"

    source $HOME/.cargo/env

  #+END_SRC

** Tmux
   #+BEGIN_SRC sh :tangle ~/.tmux.conf :replace yes
     set-option -g default-terminal "screen-256color"

      ############################################################################
      # Reset Prefix
      ############################################################################
      set -g prefix C-a
      bind-key a send-prefix # for nested tmux sessions

      set-window-option -g automatic-rename off

      set-option -g default-command "reattach-to-user-namespace -l zsh"

      # utf8 support
      # set-window-option -g utf8 on

      set-window-option -g mouse on

      # Make mouse useful in copy mode
      set-option -g mouse on

      # Use vim keybindings in copy mode
        setw -g mode-keys vi

        # Setup 'v' to begin selection as in Vim
        bind-key -t vi-copy v begin-selection
        bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

        # Update default binding of `Enter` to also use copy-pipe
        unbind -t vi-copy Enter
        bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"


      # Start copy mode when scrolling up
      bind -n WheelUpPane copy-mode

      bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
      bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
      bind-key -t vi-copy WheelUpPane halfpage-up
      bind-key -t vi-copy WheelDownPane halfpage-down

      # COPY AND PASTE
      # http://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
      #
      # Use vim keybindings in copy mode
      setw -g mode-keys vi

      # Setup 'v' to begin selection as in Vim
      bind-key -t vi-copy v begin-selection
      bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

      ############################################################################
      # Unbindings
      ############################################################################
      #unbind [ # copy mode bound to escape key
      unbind j
      unbind C-b # unbind default leader key
      unbind '"' # unbind horizontal split
      unbind %   # unbind vertical split

      # new split in current pane (horizontal / vertical)
      bind-key - split-window -v # split pane horizontally
      bind-key \ split-window -h # split pane vertically

      ############################################################################
      # panes
      ############################################################################
      # Navigation ---------------------------------------------------------------
      # use the vim motion keys to move between panes
      bind-key h select-pane -L
      bind-key j select-pane -D
      bind-key k select-pane -U
      bind-key l select-pane -R

      # Resizing ---------------------------------------------------------------
      bind-key H resize-pane -L
      bind-key J resize-pane -D
      bind-key K resize-pane -U
      bind-key L resize-pane -R

      # use vim motion keys while in copy mode
      setw -g mode-keys vi

      bind-key x kill-pane

      # List of plugins
      set -g @plugin 'tmux-plugins/tpm'
      set -g @plugin 'tmux-plugins/tmux-sensible'
      set -g @plugin 'tmux-plugins/tmux-resurrect'
      set -g @plugin 'tmux-plugins/tmux-continuum'
      set -g @plugin 'jimeh/tmux-themepack'
      set -g @plugin 'tmux-plugins/vim-tmux'

      # Other examples:
      # set -g @plugin 'github_username/plugin_name'
      # set -g @plugin 'git@github.com/user/plugin'
      # set -g @plugin 'git@bitbucket.com/user/plugin'

      # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
      run '~/.tmux/plugins/tpm/tpm'

      set -g @themepack 'double/cyan'


      # alternatively, check file exists before sourcing it in tmux.conf
      if-shell "test -f .tmux.theme" "source .tmux.theme"

      set-window-option -g automatic-rename off
      set-option -g allow-rename off 
    #+END_SRC

** NeoVim
   #+BEGIN_SRC sh :mkdirp yes :tangle ~/.config/nvim/init.vim
   set relativenumber
   set number
   #+END_SRC
